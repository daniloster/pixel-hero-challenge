path / {
  read() { auth != null }
  write() { auth != null && prior(this) == null && this != null }
}
path /users {
  read() { true }
  write() { auth != null && prior(this) == null && this != null }
}

path /users/{uid} {
  read() { true }
  write() { auth != null && prior(this) == null && this != null && auth.uid == uid }
}

path /users/{uid}/score {
  read() { true }
  write() { auth != null && prior(this) == null && this != null && auth.uid == uid }
}

path /users/{uid}/score/{id} {
  read() { true }
  write() { auth != null && prior(this) == null && this != null && auth.uid == uid }
}

path /saved_maps {
  read() { true }
  write() { auth != null && prior(this) == null && this != null }
}

path /saved_maps/{map} {
  read() { true }
  write() { auth != null && prior(this) == null && this != null }
}

path /maps {
  index() { ["dimension", "score", "timestamp"] }
  read() { true }
  write() { auth != null && prior(this) == null && this != null }
}

path /maps/{id} is MapSerialized {
  read() { true }
  write() { auth != null && prior(this) == null && this != null && isNewMap(prior(this), this) }
}

path /maps/{id}/score is Number {
  read() { true }
  write() { auth != null && (prior(this) != null || prior(this).parent() == null) }
}

type MapSerialized {
  uid: String;
  id: String;
  dimension: Number;
  serialized: String;
  timestamp: Number;
  score: Number;
}

isNewSavedMap(oldData, map) {
  oldData.key != null && root.maps[oldData.key].id == null
}

isNewMap(oldData, newData) {
  oldData.parent().parent().saved_maps[newData.serialized].uid == auth.uid && newData.id == oldData.parent().parent().saved_maps[newData.serialized].key
}